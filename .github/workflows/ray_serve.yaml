name: Ray Serve Deployment

on:
  push:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9.20'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "ray[data,train,tune,serve]==2.38.0"
          pip install "dvc[gs]"
          pip install -r requirements.txt

      - name: DVC Pull
        run: dvc pull

      # Build the teacher application
#      - name: Build teacher_app
#        run: serve build src.ray_serve:teacher_app -o teacher_serve_config.yaml
#
#      # Build the student application
#      - name: Build student_app
#        run: serve build src.ray_serve:student_app -o student_serve_config.yaml
#
#      - name: Install yq
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y jq
#          wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O yq
#          chmod +x yq
#          sudo mv yq /usr/local/bin/yq
#
#      - name: Merge teacher and student configs
#        run: |
#          # Merge applications arrays from teacher_serve_config.yaml and student_serve_config.yaml
#          yq eval-all '.[0].applications += .[1].applications | .[0]' teacher_serve_config.yaml student_serve_config.yaml > combined.yaml
#
#      - name: Add runtime_env to both applications
#        run: |
#          # Add runtime_env with pip pointing to requirements.txt
#          # This sets the same runtime_env for both applications in the merged file
#          yq -i '.applications[].runtime_env = {"pip": ["-r requirements.txt"]}' combined.yaml
#
#      - name: Set route_prefix for teacher and student
#        run: |
#          yq -i '.applications[] | select(.name == "teacher").route_prefix = "/teacher"' combined.yaml
#          yq -i '.applications[] | select(.name == "student").route_prefix = "/student"' combined.yaml
#
#      - name: Set import paths
#        run: |
#          yq -i '.applications[] | select(.name == "teacher").import_path = "src.ray_serve:teacher_app"' combined.yaml
#          yq -i '.applications[] | select(.name == "student").import_path = "src.ray_serve:student_app"' combined.yaml
#
#      - name: Set deployment options for teacher
#        run: |
#          yq -i '.applications[] | select(.name == "teacher").deployments[0].num_replicas = 1' combined.yaml
#          yq -i '.applications[] | select(.name == "teacher").deployments[0].ray_actor_options.num_cpus = 0.8' combined.yaml
#          yq -i '.applications[] | select(.name == "teacher").deployments[0].ray_actor_options.num_gpus = 0.0' combined.yaml
#          yq -i '.applications[] | select(.name == "teacher").deployments[0].ray_actor_options.memory = 6442450944.0' combined.yaml
#
#      - name: Set deployment options for student
#        run: |
#          yq -i '.applications[] | select(.name == "student").deployments[0].num_replicas = 1' combined.yaml
#          yq -i '.applications[] | select(.name == "student").deployments[0].ray_actor_options.num_cpus = 0.8' combined.yaml
#          yq -i '.applications[] | select(.name == "student").deployments[0].ray_actor_options.num_gpus = 0.0' combined.yaml
#          yq -i '.applications[] | select(.name == "student").deployments[0].ray_actor_options.memory = 6442450944.0' combined.yaml
#
#      - name: Show final combined.yaml for debugging
#        run: cat combined.yaml

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo $K8S_CONFIG | base64 -d > ~/.kube/config
        env:
          K8S_CONFIG: ${{ secrets.K8S_CONFIG }}

      - name: Start port-forward
        run: |
          kubectl port-forward service/raycluster-kuberay-head-svc 8265:8265 > port-forward.log 2>&1 &
          sleep 10
          if ! nc -z localhost 8265; then
              echo "Port-forward failed to start. Logs:"
              cat port-forward.log
              exit 1
          fi

      - name: Create Tag
        id: create_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Generate a tag name. Customize this as needed.
          TAG_NAME=v1.0.${{ github.run_number }}
          
          # Configure Git with a user name and email
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create an annotated tag
          git tag -a $TAG_NAME -m "Release $TAG_NAME"
          
          # Push the tag to the repository
          git push origin $TAG_NAME
          
          # Export the tag name to be used in subsequent steps
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          release_name: "Release from ${{ github.ref }}"
          draft: false
          prerelease: false

      - name: Echo release info
        run: |
          echo "Release name: Release from ${{ github.ref }}"
          echo "Download URL for the source code (zip): https://github.com/${{ github.repository }}/archive/refs/tags/${{ steps.create_tag.outputs.tag_name }}.zip"

      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O yq
          chmod +x yq
          sudo mv yq /usr/local/bin/yq

      - name: Create combined.yaml from ray_serve_config.yaml
        run: |
          cp ray_serve_config.yaml combined.yaml
          yq -i '.applications[].runtime_env.working_dir = "https://github.com/${{ github.repository }}/archive/refs/tags/${{ steps.create_tag.outputs.tag_name }}.zip"' combined.yaml

      - name: Deploy combined application
        run: serve deploy combined.yaml --address http://localhost:8265

      - name: Port-forward Ray Serve HTTP Endpoint
        run: |
          sleep 5
          kubectl port-forward service/raycluster-kuberay-head-svc 8000:8000 > port-forward-serve.log 2>&1 &
          sleep 3
          if ! nc -z localhost 8000; then
              echo "Port-forward of serve endpoint failed. Logs:"
              cat port-forward-serve.log
              exit 1
          fi
          sleep 3

      - name: Test Deployment
        run: |
          python test/test_ray_serve.py

      - name: Upload combined.yaml artifact
        uses: actions/upload-artifact@v3
        with:
          name: combined_config_artifact
          path: combined.yaml
